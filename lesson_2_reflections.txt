What happens when you initialize a repository?
	
	When you initialize a repository, it creates a .git folder in the repository. This folder would be used to store the history of the files and directories in the repository.

Why do you need to do it?

	You need to do it to enable Git track and store the commit histories of the files in the repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is a temporary location where files are added before using git commit to add them to the repository. It's like "limbo" :-)

	The staging area gives the flexibility of deciding what files to add to the commit, therefore, it helps to split each commit into logical changes.

How can you use the stagina area to make sure you have one commit per logical change?
	
	You can use the staging area to ensure you have one logical change per commit by including the necessary files for a single commit in the staging area before you commit.

What are some situatios when branches would be helpful in keeping your history organised? How would branches help?

	Some situations when branches would be useful in keeping your history organised are:
	1. When you need to create a different version of a code, while keeping the original version.
	2. When you need to try out an experimental feature in your code.
	3. When you're trying to optimize your code and you are unsure whether the optimizatoin would lead to an improvement or not.

	Branches enable you to keep your master commit, while you can checkout and make changes on the branch.
	
How do the diagrams help you visualize the branch structure?

	The diagrams help you visualize the branch structure by showing all the branches, and letting you trace back from a commit through its parent, and also helps you determine reachability

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	When we merge two branches together we represent it as a new tip to the master branch. The previous branch is lost and the commit history for the previous branch can now be reached from the new master tip. However, the commit history of the two branches are now listed chronologically under the new master tip.

	Using git diff is a little meaningless, becuase the chronological order does not reflect the order in which the changes were made, but git show can be used to compare a specific commit with it's parent.

What are the pros and cons of Git's automatic merging vs always doing merges manually.

	Automatic merging is easier, however you still need to resolve conflicts manually. So it give the ease of automatic merging, while offering the flexibility of switching to the manual mode whenever there is a conflict.

	